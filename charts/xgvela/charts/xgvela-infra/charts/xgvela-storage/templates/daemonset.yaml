# Copyright 2021 Mavenir
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Values.global.xgvela.infra_deploy -}}
{{- if and (.Values.global) (.Values.global.xgvela) (.Values.global.xgvela.storage) (.Values.global.xgvela.storage.isProviderXGVela) (.Values.global.xgvela.storage.isLVPenabled)}}
{{- $cnfHdr := (dict "" "") -}} 
{{- include "cnfTplHeader_2_9" (dict "cnfHdr" $cnfHdr "dot" . ) -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.lvp.common.app_name}}
  labels:
    app: {{ .Values.lvp.common.app_name}}
  namespace: {{ $cnfHdr.nfVariables.nfPrefix }} 
spec:
  selector:
    matchLabels:
      app: {{ .Values.lvp.common.app_name}}
  template:
    metadata:
      labels:
        app: {{ .Values.lvp.common.app_name}}
    spec:
      {{- if and (.Values.global) (.Values.global.xgvela) (.Values.global.xgvela.infraNodeSelector) (.Values.global.xgvela.infraNodeSelector.enabled) }}
      nodeSelector:
        {{ .Values.global.xgvela.infraNodeSelector.labelKey }}: {{ .Values.global.xgvela.infraNodeSelector.labelValue | quote }}
      {{- end }}
      serviceAccountName: {{ .Values.lvp.serviceaccount.name}}
      containers:
        - name: provisioner
          {{- if (.Values.global) and (.Values.global.hub) }}
          image: {{ .Values.global.hub }}/{{ .Values.lvp.container.image.repository }}:{{ .Values.lvp.container.image.tag }}
          {{- else }}
          image: {{ .Values.lvp.container.image.hub }}/{{ .Values.lvp.container.image.repository }}:{{ .Values.lvp.container.image.tag }}
          {{- end }}
          imagePullPolicy: "Always"         
          securityContext:
            privileged: true
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          volumeMounts:
            - mountPath: /etc/provisioner/config
              name: provisioner-config
              readOnly: true
            - mountPath:  {{ .Values.lvp.configmap.path }}
              name: fast-disks
              mountPropagation: "HostToContainer"
      volumes:
        - name: provisioner-config
          configMap:
            name: {{ .Values.lvp.configmap.name }}
        - name: fast-disks
          hostPath:
            path: {{ .Values.lvp.configmap.path }}
{{- end -}}
{{- end -}}

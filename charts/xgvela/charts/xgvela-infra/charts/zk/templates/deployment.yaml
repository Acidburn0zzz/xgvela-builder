# Copyright 2021 Mavenir
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Values.global.xgvela.infra_deploy -}}
{{- $cnfHdr := (dict "" "") -}}
{{- include "cnfTplHeader_2_9" (dict "cnfHdr" $cnfHdr "dot" . ) -}}
apiVersion: apps/v1
kind: StatefulSet
{{- include "cnfTplMetadata_2_9" (dict "setOffset" "0" "cnfHdr" $cnfHdr "metadata" "") }}
spec:
  serviceName: {{ .Values.common.app_name }}
  replicas: {{ .Values.container.replica_count }}
  selector:
    matchLabels:
      app: {{ .Values.common.app_name }}
  template:
    {{- include "cnfTplMetadata_2_9" (dict "setOffset" "4" "cnfHdr" $cnfHdr "metadata" .Values.componentSpec.deployment.pod_metaspec) }}
    spec:
      containers:
      - name: {{ .Values.common.app_name }}
        {{- if and (.Values.global) (.Values.global.hub) }}
        image: {{ .Values.global.hub }}/{{ .Values.container.image.repository }}:{{ .Values.container.image.tag }}
        {{- else }}
        image: {{ .Values.container.image.hub }}/{{ .Values.container.image.repository }}:{{ .Values.container.image.tag }}
        {{- end }}
        imagePullPolicy: Always
        env:
        - name: K8S_POD_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ZK_REPLICAS
          value: {{ .Values.container.replica_count | quote }}
        - name: ZK_HEAP_SIZE
          value: {{ .Values.container.config.ZK_HEAP_SIZE | quote }}
{{- if .Values.volume.pvenabled }}
        - name: ZK_DATA_DIR
          value: {{ .Values.container.config.ZK_DATA_DIR | quote }}
        - name: ZK_DATA_LOG_DIR
          value: {{ .Values.container.config.ZK_DATA_LOG_DIR | quote }}
{{- end }}
        resources:
          limits:
            cpu: {{ .Values.container.resource.limit_cpu }}
            memory: {{ .Values.container.resource.limit_memory }}
          requests:
            cpu: {{ .Values.container.resource.requests_cpu }}
            memory: {{ .Values.container.resource.requests_memory }}
        ports:
        - containerPort: {{ .Values.container.ports.client }}
          name: client
        - containerPort: {{ .Values.container.ports.server }}
          name: server
        - containerPort: {{ .Values.container.ports.leader_election }}
          name: leader-election
        readinessProbe:
          exec:
            command:
            - {{ .Values.container.readiness_config.exec_command | quote }}
          initialDelaySeconds: {{ .Values.container.readiness_config.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.container.readiness_config.timeoutSeconds }}
        livenessProbe:
          exec:
            command:
            - {{ .Values.container.liveness_config.exec_command | quote }}
          initialDelaySeconds: {{ .Values.container.liveness_config.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.container.liveness_config.timeoutSeconds }}
{{- if .Values.volume.pvenabled }}
        volumeMounts:
        - name: zk-vol
          mountPath: /zk
{{- end }}
{{- if and (.Values.global) (.Values.global.xgvela) (.Values.global.xgvela.infraNodeSelector) (.Values.global.xgvela.infraNodeSelector.enabled) }}
      nodeSelector:
        {{ .Values.global.xgvela.infraNodeSelector.labelKey }}: {{ .Values.global.xgvela.infraNodeSelector.labelValue | quote }}
{{- end }}
{{- if .Values.volume.pvenabled }}
  volumeClaimTemplates:
  - metadata:
      name: zk-vol
    spec:
      accessModes: [ {{ .Values.volume.accessModes }} ]
      storageClassName: {{ .Values.global.xgvela.storage.storageClass }}
      resources:
        requests:
          storage: {{ .Values.volume.storageClaim }}
{{- if and (.Values.global) (.Values.global.xgvela) (.Values.global.xgvela.storage) (.Values.global.xgvela.storage.isProviderXGVela) }}
      selector:
        matchLabels:
          zk-vol: "true"
{{- end }}
{{- end }}
{{- end }}
